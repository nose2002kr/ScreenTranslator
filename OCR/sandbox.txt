cv::Mat hwnd2mat(HWND hwnd)
{
  RECT rc;
  GetClientRect(hwnd, &rc);
  int width = rc.right;
  int height = rc.bottom;

  cv::Mat src;
  src.create(height, width, CV_8UC4);

  HDC hdc = GetDC(hwnd);
  HDC memdc = CreateCompatibleDC(hdc);
  HBITMAP hbitmap = CreateCompatibleBitmap(hdc, width, height);
  HBITMAP oldbmp = (HBITMAP)SelectObject(memdc, hbitmap);

  BitBlt(memdc, 0, 0, width, height, hdc, 0, 0, SRCCOPY);
  SelectObject(memdc, oldbmp);

  BITMAPINFOHEADER  bi = { sizeof(BITMAPINFOHEADER), width, -height, 1, 32, BI_RGB };
  GetDIBits(hdc, hbitmap, 0, height, src.data, (BITMAPINFO*)&bi, DIB_RGB_COLORS);

  DeleteObject(hbitmap);
  DeleteDC(memdc);
  ReleaseDC(hwnd, hdc);

  return src;
}

void
ocrTest() {
  HWND hwndDesktop = GetDesktopWindow();
  cv::Mat src = hwnd2mat(hwndDesktop);
  OCR ocr("C:/Users/1004/C++/tesseract/tessdata");
  ocr.findOutTextInfos(&src);

  /*
  HWND hwndDesktop = GetDesktopWindow();
  Mat src = hwnd2mat(hwndDesktop);
  tesseract::TessBaseAPI *api = new tesseract::TessBaseAPI();
  // Initialize tesseract-ocr with English, without specifying tessdata path
  if (api->Init("C:/Users/1004/C++/tesseract/tessdata", "eng")) {
    fprintf(stderr, "Could not initialize tesseract.\n");
    exit(1);
  }

  // Open input image with leptonica library
  api->SetImage(src.data, src.cols, src.rows, 4, 4 * src.cols);
  //Pix *image = pixRead("C:/Users/1004/Pictures/sample.tif");
  //api->SetImage(image);
  // Get OCR result
  char* outText = api->GetUTF8Text();
  printf("OCR output:\n%s", outText);

  // Destroy used object and release memory
  api->End();
  //delete[] outText;
  //pixDestroy(&image);

  ::Sleep(2000);
  */


  /*
  HWND hwndDesktop = GetDesktopWindow();
  Mat src = hwnd2mat(hwndDesktop);
  cv::imwrite("./capturedImage.png", src);
  tesseract::TessBaseAPI api;
  api.SetPageSegMode(tesseract::PSM_AUTO);  // Segmentation on auto
  api.Init("C:/Users/1004/C++/tesseract/tessdata", "eng");   // path = parent directory of tessdata
  // Open input image using OpenCV
  std::vector<cv::Rect> letterBBoxes1 = detectLetters(src);

  for (int i = 0; i < letterBBoxes1.size(); i++) {
    cv::Mat cropImg = src(letterBBoxes1[i]);
    cv::rectangle(src, letterBBoxes1[i], cv::Scalar(0, 255, 0, 255), 3, 8, 0);
    //cv::threshold(cropImg, cropImg, 0, 255, cv::THRESH_BINARY);
    cv::imwrite("./crop.png", cropImg);
    //api.SetImage(cropImg.data, cropImg.cols, cropImg.rows, 4, 4 * cropImg.cols);
    api.SetImage(cropImg.data, cropImg.cols, cropImg.rows, 4, 4 * cropImg.cols);
    // Set image data
    //api.SetImage(image);       // Run the OCR
    char* textOutput = new char[512];
    textOutput = api.GetUTF8Text();     // Get the text

    // print recognized text
    cout << textOutput << endl; // Destroy used object and release memory ocr->End();
  }

  cv::imwrite("./searchedImage.png", src);
  */

}

int main(int argc, char* argv[])
{
  ocrTest();
  //return 0;
  
  return EXIT_SUCCESS;
}